{"version":3,"sources":["../../src/serialization/peer.js"],"names":["peerInfoFromJson","obj","peerIdFromJson","id","then","peerId","peerInfo","PeerInfo","multiaddrs","forEach","multiaddr","add","_connectedMultiaddr","connect","peerInfoToJson","__ipfsPostMsgProxyType","peerIdToJson","toArray","map","multiaddrToJson","isPeerInfo","isPeerInfoJson","prePeerInfoFromJson","index","args","prePeerInfoToJson","Promise","resolve","reject","PeerId","createFromJSON","err","Object","assign","toJSON","isPeerId","isPeerIdJson","prePeerIdFromJson","prePeerIdToJson"],"mappings":"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","file":"peer.js","sourcesContent":["import PeerInfo from 'peer-info'\r\nimport PeerId from 'peer-id'\r\nimport { multiaddrToJson, multiaddrFromJson } from './multiaddr'\r\n\r\nexport const peerInfoFromJson = (obj) => {\r\n  return peerIdFromJson(obj.id)\r\n    .then((peerId) => {\r\n      const peerInfo = new PeerInfo(peerId)\r\n\r\n      obj.multiaddrs.forEach((multiaddr) => {\r\n        peerInfo.multiaddrs.add(multiaddrFromJson(multiaddr))\r\n      })\r\n\r\n      if (obj._connectedMultiaddr) {\r\n        peerInfo.connect(multiaddrFromJson(obj._connectedMultiaddr))\r\n      }\r\n\r\n      return peerInfo\r\n    })\r\n}\r\n\r\nexport const peerInfoToJson = (peerInfo) => ({\r\n  __ipfsPostMsgProxyType: 'PeerInfo',\r\n  id: peerIdToJson(peerInfo.id),\r\n  multiaddrs: peerInfo.multiaddrs.toArray().map(multiaddrToJson),\r\n  _connectedMultiaddr: peerInfo._connectedMultiaddr\r\n    ? multiaddrToJson(peerInfo._connectedMultiaddr)\r\n    : null\r\n})\r\n\r\nexport const isPeerInfo = PeerInfo.isPeerInfo\r\nexport const isPeerInfoJson = (obj) => obj && obj.__ipfsPostMsgProxyType === 'PeerInfo'\r\n\r\nexport const prePeerInfoFromJson = (index) => {\r\n  return (...args) => {\r\n    if (isPeerInfoJson(args[index])) {\r\n      args[index] = peerInfoFromJson(args[index])\r\n    }\r\n    return args\r\n  }\r\n}\r\n\r\nexport const prePeerInfoToJson = (index) => {\r\n  return (...args) => {\r\n    if (isPeerInfo(args[index])) {\r\n      args[index] = peerInfoToJson(args[index])\r\n    }\r\n    return args\r\n  }\r\n}\r\n\r\nexport const peerIdFromJson = (obj) => new Promise((resolve, reject) => {\r\n  PeerId.createFromJSON(obj, (err, peerId) => {\r\n    if (err) return reject(err)\r\n    resolve(peerId)\r\n  })\r\n})\r\n\r\nexport const peerIdToJson = (peerId) => Object.assign(\r\n  { __ipfsPostMsgProxyType: 'PeerId' },\r\n  peerId.toJSON()\r\n)\r\n\r\nexport const isPeerId = PeerId.isPeerId\r\nexport const isPeerIdJson = (obj) => obj && obj.__ipfsPostMsgProxyType === 'PeerId'\r\n\r\nexport const prePeerIdFromJson = (index) => {\r\n  return (...args) => {\r\n    if (isPeerIdJson(args[index])) {\r\n      args[index] = peerIdFromJson(args[index])\r\n    }\r\n    return args\r\n  }\r\n}\r\n\r\nexport const prePeerIdToJson = (index) => {\r\n  return (...args) => {\r\n    if (isPeerId(args[index])) {\r\n      args[index] = peerIdToJson(args[index])\r\n    }\r\n    return args\r\n  }\r\n}\r\n"]}