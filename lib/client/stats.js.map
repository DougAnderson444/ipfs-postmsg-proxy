{"version":3,"sources":["../../src/client/stats.js"],"names":["opts","api","bw","callbackify","variadic","stats","totalIn","totalOut","rateIn","rateOut","bwReadableStream","toStream","source","bwPullStream","arguments","res","PMS","name","Object","assign","post","data","deferred","defer","then","resolve","catch","err","abort"],"mappings":";;;;;;kBAQe,UAAUA,IAAV,EAAgB;AAC7B,MAAMC,MAAM;AACVC,QAAIC,sBAAYC,QAAZ,CACF,mBACE,wBAAO,eAAP,EAAwBJ,IAAxB,CADF,EAEE,UAACK,KAAD,EAAW;AACT,UAAIA,KAAJ,EAAW;AACT,YAAI,oBAAUA,MAAMC,OAAhB,CAAJ,EAA8B;AAC5BD,gBAAMC,OAAN,GAAgB,sBAAYD,MAAMC,OAAlB,CAAhB;AACD;;AAED,YAAI,oBAAUD,MAAME,QAAhB,CAAJ,EAA+B;AAC7BF,gBAAME,QAAN,GAAiB,sBAAYF,MAAME,QAAlB,CAAjB;AACD;;AAED,YAAI,oBAAUF,MAAMG,MAAhB,CAAJ,EAA6B;AAC3BH,gBAAMG,MAAN,GAAe,sBAAYH,MAAMG,MAAlB,CAAf;AACD;;AAED,YAAI,oBAAUH,MAAMI,OAAhB,CAAJ,EAA8B;AAC5BJ,gBAAMI,OAAN,GAAgB,sBAAYJ,MAAMI,OAAlB,CAAhB;AACD;AACF;;AAED,aAAOJ,KAAP;AACD,KAtBH,CADE,CADM;AA2BVK,oBA3BU,8BA2BU;AAClB,aAAOC,6BAASC,MAAT,CAAgBX,IAAIY,YAAJ,YAAoBC,SAApB,CAAhB,CAAP;AACD,KA7BS;;AA8BVD,kBAAe,YAAM;AACnB,UAAMA,eAAe,mBACnB,wBAAO,yBAAP,EAAkCb,IAAlC,CADmB,EAEnB,UAACe,GAAD;AAAA,eAASC,4BAAIJ,MAAJ,CAAWG,IAAIE,IAAf,EAAqBC,OAAOC,MAAP,CAAc,EAAd,EAAkBnB,IAAlB,EAAwB;AACpDoB,cADoD,gBAC9CL,GAD8C,EACzC;AACT,gBAAMV,QAAQU,IAAIM,IAAlB;;AAEA,gBAAIhB,KAAJ,EAAW;AACT,kBAAI,oBAAUA,MAAMC,OAAhB,CAAJ,EAA8B;AAC5BD,sBAAMC,OAAN,GAAgB,sBAAYD,MAAMC,OAAlB,CAAhB;AACD;;AAED,kBAAI,oBAAUD,MAAME,QAAhB,CAAJ,EAA+B;AAC7BF,sBAAME,QAAN,GAAiB,sBAAYF,MAAME,QAAlB,CAAjB;AACD;;AAED,kBAAI,oBAAUF,MAAMG,MAAhB,CAAJ,EAA6B;AAC3BH,sBAAMG,MAAN,GAAe,sBAAYH,MAAMG,MAAlB,CAAf;AACD;;AAED,kBAAI,oBAAUH,MAAMI,OAAhB,CAAJ,EAA8B;AAC5BJ,sBAAMI,OAAN,GAAgB,sBAAYJ,MAAMI,OAAlB,CAAhB;AACD;AACF;;AAED,mBAAOM,GAAP;AACD;AAvBmD,SAAxB,CAArB,CAAT;AAAA,OAFmB,CAArB;;AA6BA,aAAO,YAAa;AAClB,YAAMO,WAAWC,oBAAMX,MAAN,EAAjB;;AAEAC,iDACGW,IADH,CACQ,UAACT,GAAD;AAAA,iBAASO,SAASG,OAAT,CAAiBV,GAAjB,CAAT;AAAA,SADR,EAEGW,KAFH,CAES,UAACC,GAAD;AAAA,iBAASL,SAASM,KAAT,CAAeD,GAAf,CAAT;AAAA,SAFT;;AAIA,eAAOL,QAAP;AACD,OARD;AASD,KAvCa;AA9BJ,GAAZ;;AAwEA,SAAOrB,GAAP;AACD,C;;AAlFD;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA","file":"stats.js","sourcesContent":["import { caller } from 'postmsg-rpc'\r\nimport callbackify from 'callbackify'\r\nimport { post } from 'prepost'\r\nimport defer from 'pull-defer'\r\nimport PMS from 'pull-postmsg-stream'\r\nimport toStream from 'pull-stream-to-stream'\r\nimport { isBigJson, bigFromJson } from '../serialization/big'\r\n\r\nexport default function (opts) {\r\n  const api = {\r\n    bw: callbackify.variadic(\r\n      post(\r\n        caller('ipfs.stats.bw', opts),\r\n        (stats) => {\r\n          if (stats) {\r\n            if (isBigJson(stats.totalIn)) {\r\n              stats.totalIn = bigFromJson(stats.totalIn)\r\n            }\r\n\r\n            if (isBigJson(stats.totalOut)) {\r\n              stats.totalOut = bigFromJson(stats.totalOut)\r\n            }\r\n\r\n            if (isBigJson(stats.rateIn)) {\r\n              stats.rateIn = bigFromJson(stats.rateIn)\r\n            }\r\n\r\n            if (isBigJson(stats.rateOut)) {\r\n              stats.rateOut = bigFromJson(stats.rateOut)\r\n            }\r\n          }\r\n\r\n          return stats\r\n        }\r\n      )\r\n    ),\r\n    bwReadableStream () {\r\n      return toStream.source(api.bwPullStream(...arguments))\r\n    },\r\n    bwPullStream: (() => {\r\n      const bwPullStream = post(\r\n        caller('ipfs.stats.bwPullStream', opts),\r\n        (res) => PMS.source(res.name, Object.assign({}, opts, {\r\n          post (res) {\r\n            const stats = res.data\r\n\r\n            if (stats) {\r\n              if (isBigJson(stats.totalIn)) {\r\n                stats.totalIn = bigFromJson(stats.totalIn)\r\n              }\r\n\r\n              if (isBigJson(stats.totalOut)) {\r\n                stats.totalOut = bigFromJson(stats.totalOut)\r\n              }\r\n\r\n              if (isBigJson(stats.rateIn)) {\r\n                stats.rateIn = bigFromJson(stats.rateIn)\r\n              }\r\n\r\n              if (isBigJson(stats.rateOut)) {\r\n                stats.rateOut = bigFromJson(stats.rateOut)\r\n              }\r\n            }\r\n\r\n            return res\r\n          }\r\n        }))\r\n      )\r\n\r\n      return (...args) => {\r\n        const deferred = defer.source()\r\n\r\n        bwPullStream(...args)\r\n          .then((res) => deferred.resolve(res))\r\n          .catch((err) => deferred.abort(err))\r\n\r\n        return deferred\r\n      }\r\n    })()\r\n  }\r\n\r\n  return api\r\n}\r\n"]}