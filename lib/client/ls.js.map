{"version":3,"sources":["../../src/client/ls.js"],"names":["opts","api","ls","callbackify","variadic","lsReadableStream","toStream","source","lsPullStream","arguments","res","PMS","name","deferred","defer","then","resolve","catch","err","abort"],"mappings":";;;;;;kBASe,UAAUA,IAAV,EAAgB;AAC7B,MAAMC,MAAM;AACVC,QAAIC,sBAAYC,QAAZ,CACF,kBACE,6BAAgB,CAAhB,CADF,EAEE,uBAAa,CAAb,CAFF,EAGE,wBAAO,SAAP,EAAkBJ,IAAlB,CAHF,CADE,CADM;AAQVK,oBARU,8BAQU;AAClB,aAAOC,6BAASC,MAAT,CAAgBN,IAAIO,YAAJ,YAAoBC,SAApB,CAAhB,CAAP;AACD,KAVS;;AAWVD,kBAAe,YAAM;AACnB,UAAMA,eAAe,kBACnB,6BAAgB,CAAhB,CADmB,EAEnB,uBAAa,CAAb,CAFmB,EAGnB,mBACE,wBAAO,mBAAP,EAA4BR,IAA5B,CADF,EAEE,UAACU,GAAD;AAAA,eAASC,4BAAIJ,MAAJ,CAAWG,IAAIE,IAAf,EAAqBZ,IAArB,CAAT;AAAA,OAFF,CAHmB,CAArB;;AASA,aAAO,YAAa;AAClB,YAAMa,WAAWC,oBAAMP,MAAN,EAAjB;;AAEAC,iDACGO,IADH,CACQ,UAACL,GAAD;AAAA,iBAASG,SAASG,OAAT,CAAiBN,GAAjB,CAAT;AAAA,SADR,EAEGO,KAFH,CAES,UAACC,GAAD;AAAA,iBAASL,SAASM,KAAT,CAAeD,GAAf,CAAT;AAAA,SAFT;;AAIA,eAAOL,QAAP;AACD,OARD;AASD,KAnBa;AAXJ,GAAZ;;AAiCA,SAAOZ,GAAP;AACD,C;;AA5CD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA","file":"ls.js","sourcesContent":["import { caller } from 'postmsg-rpc'\r\nimport callbackify from 'callbackify'\r\nimport defer from 'pull-defer'\r\nimport toStream from 'pull-stream-to-stream'\r\nimport PMS from 'pull-postmsg-stream'\r\nimport { pre, post } from 'prepost'\r\nimport { preCidToJson } from '../serialization/cid'\r\nimport { preBufferToJson } from '../serialization/buffer'\r\n\r\nexport default function (opts) {\r\n  const api = {\r\n    ls: callbackify.variadic(\r\n      pre(\r\n        preBufferToJson(0),\r\n        preCidToJson(0),\r\n        caller('ipfs.ls', opts)\r\n      )\r\n    ),\r\n    lsReadableStream () {\r\n      return toStream.source(api.lsPullStream(...arguments))\r\n    },\r\n    lsPullStream: (() => {\r\n      const lsPullStream = pre(\r\n        preBufferToJson(0),\r\n        preCidToJson(0),\r\n        post(\r\n          caller('ipfs.lsPullStream', opts),\r\n          (res) => PMS.source(res.name, opts)\r\n        )\r\n      )\r\n\r\n      return (...args) => {\r\n        const deferred = defer.source()\r\n\r\n        lsPullStream(...args)\r\n          .then((res) => deferred.resolve(res))\r\n          .catch((err) => deferred.abort(err))\r\n\r\n        return deferred\r\n      }\r\n    })()\r\n  }\r\n\r\n  return api\r\n}\r\n"]}