{"version":3,"sources":["../../src/client/dag.js"],"names":["opts","put","callbackify","variadic","args","isBuffer","bufferToJson","cid","cidFromJson","get","res","value","then","isBufferJson","bufferFromJson","tree"],"mappings":";;;;;;kBAQe,UAAUA,IAAV,EAAgB;AAC7B,SAAO;AACLC,SAAKC,sBAAYC,QAAZ,CACH,kBACE,2BAAiB,CAAjB,CADF,EAEE,YAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AACX,UAAIA,KAAK,CAAL,KAAW,CAAC,wBAAcA,KAAK,CAAL,CAAd,CAAhB,EAAwC;AACtCA,aAAK,CAAL,IAAU,6BAAcA,KAAK,CAAL,CAAd,EAAuBC,gBAAvB,EAAiCC,oBAAjC,CAAV;AACD;;AAED,UAAIF,KAAK,CAAL,KAAWA,KAAK,CAAL,EAAQG,GAAvB,EAA4B;AAC1B,YAAI,sBAASH,KAAK,CAAL,EAAQG,GAAjB,CAAJ,EAA2B;AACzBH,eAAK,CAAL,EAAQG,GAAR,GAAc,0BAAaH,KAAK,CAAL,EAAQG,GAArB,CAAd;AACD,SAFD,MAEO,IAAI,gBAAMH,KAAK,CAAL,EAAQG,GAAd,CAAJ,EAAwB;AAC7BH,eAAK,CAAL,EAAQG,GAAR,GAAc,oBAAUH,KAAK,CAAL,EAAQG,GAAlB,CAAd;AACD;AACF;;AAED,aAAOH,IAAP;AACD,KAhBH,EAiBE,mBACE,wBAAO,cAAP,EAAuBJ,IAAvB,CADF,EAEEQ,gBAFF,CAjBF,CADG,CADA;AAyBLC,SAAKP,sBAAYC,QAAZ,CACH,kBACE,6BAAgB,CAAhB,CADF,EAEE,uBAAa,CAAb,CAFF,EAGE,mBACE,wBAAO,cAAP,EAAuBH,IAAvB,CADF,EAEE,UAACU,GAAD,EAAS;AACP,UAAI,wBAAcA,IAAIC,KAAlB,CAAJ,EAA8B;AAC5B,eAAO,0BAAgBD,IAAIC,KAApB,EAA2BC,IAA3B,CAAgC,UAACD,KAAD;AAAA,iBAAY,EAAEA,YAAF,EAAZ;AAAA,SAAhC,CAAP;AACD;;AAED,UAAI,0BAAaD,IAAIC,KAAjB,CAAJ,EAA6B;AAC3BD,YAAIC,KAAJ,GAAY,4BAAeD,IAAIC,KAAnB,CAAZ;AACD,OAFD,MAEO,IAAID,IAAIC,KAAR,EAAe;AAAE;AACtBD,YAAIC,KAAJ,GAAY,6BAAcD,IAAIC,KAAlB,EAAyBE,oBAAzB,EAAuCC,sBAAvC,CAAZ;AACD;;AAED,aAAOJ,GAAP;AACD,KAdH,CAHF,CADG,CAzBA;AA+CLK,UAAMb,sBAAYC,QAAZ,CACJ,kBACE,6BAAgB,CAAhB,CADF,EAEE,uBAAa,CAAb,CAFF,EAGE,wBAAO,eAAP,EAAwBH,IAAxB,CAHF,CADI;AA/CD,GAAP;AAuDD,C;;AAhED;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA","file":"dag.js","sourcesContent":["import { caller } from 'postmsg-rpc'\r\nimport callbackify from 'callbackify'\r\nimport { pre, post } from 'prepost'\r\nimport { isDagNodeJson, preDagNodeToJson, dagNodeFromJson } from '../serialization/dag'\r\nimport { isCid, cidFromJson, cidToJson, preCidToJson } from '../serialization/cid'\r\nimport { isBuffer, isBufferJson, preBufferToJson, bufferToJson, bufferFromJson } from '../serialization/buffer'\r\nimport convertValues from '../serialization/utils/convert-values'\r\n\r\nexport default function (opts) {\r\n  return {\r\n    put: callbackify.variadic(\r\n      pre(\r\n        preDagNodeToJson(0),\r\n        (...args) => {\r\n          if (args[0] && !isDagNodeJson(args[0])) {\r\n            args[0] = convertValues(args[0], isBuffer, bufferToJson)\r\n          }\r\n\r\n          if (args[1] && args[1].cid) {\r\n            if (isBuffer(args[1].cid)) {\r\n              args[1].cid = bufferToJson(args[1].cid)\r\n            } else if (isCid(args[1].cid)) {\r\n              args[1].cid = cidToJson(args[1].cid)\r\n            }\r\n          }\r\n\r\n          return args\r\n        },\r\n        post(\r\n          caller('ipfs.dag.put', opts),\r\n          cidFromJson\r\n        )\r\n      )\r\n    ),\r\n    get: callbackify.variadic(\r\n      pre(\r\n        preBufferToJson(0),\r\n        preCidToJson(0),\r\n        post(\r\n          caller('ipfs.dag.get', opts),\r\n          (res) => {\r\n            if (isDagNodeJson(res.value)) {\r\n              return dagNodeFromJson(res.value).then((value) => ({ value }))\r\n            }\r\n\r\n            if (isBufferJson(res.value)) {\r\n              res.value = bufferFromJson(res.value)\r\n            } else if (res.value) { // TODO: CBOR node, is this correct?\r\n              res.value = convertValues(res.value, isBufferJson, bufferFromJson)\r\n            }\r\n\r\n            return res\r\n          }\r\n        )\r\n      )\r\n    ),\r\n    tree: callbackify.variadic(\r\n      pre(\r\n        preBufferToJson(0),\r\n        preCidToJson(0),\r\n        caller('ipfs.dag.tree', opts)\r\n      )\r\n    )\r\n  }\r\n}\r\n"]}