{"version":3,"sources":["../../../src/client/files/read.js"],"names":["opts","api","read","callbackify","variadic","bufferFromJson","readReadableStream","toStream","source","readPullStream","arguments","res","PMS","name","Object","assign","post","data","deferred","defer","then","resolve","catch","err","abort"],"mappings":";;;;;;kBAQe,UAAUA,IAAV,EAAgB;AAC7B,MAAMC,MAAM;AACVC,UAAMC,sBAAYC,QAAZ,CACJ,mBACE,wBAAO,iBAAP,EAA0BJ,IAA1B,CADF,EAEEK,sBAFF,CADI,CADI;AAOVC,sBAPU,gCAOY;AACpB,aAAOC,6BAASC,MAAT,CAAgBP,IAAIQ,cAAJ,YAAsBC,SAAtB,CAAhB,CAAP;AACD,KATS;;AAUVD,oBAAiB,YAAM;AACrB,UAAMA,iBAAiB,mBACrB,wBAAO,2BAAP,EAAoCT,IAApC,CADqB,EAErB,UAACW,GAAD;AAAA,eAASC,4BAAIJ,MAAJ,CAAWG,IAAIE,IAAf,EAAqBC,OAAOC,MAAP,CAAc,EAAd,EAAkBf,IAAlB,EAAwB;AACpDgB,cADoD,gBAC9CL,GAD8C,EACzC;AACT,gBAAI,0BAAaA,IAAIM,IAAjB,CAAJ,EAA4B;AAC1BN,kBAAIM,IAAJ,GAAW,4BAAeN,IAAIM,IAAnB,CAAX;AACD;;AAED,mBAAON,GAAP;AACD;AAPmD,SAAxB,CAArB,CAAT;AAAA,OAFqB,CAAvB;;AAaA,aAAO,YAAa;AAClB,YAAMO,WAAWC,oBAAMX,MAAN,EAAjB;;AAEAC,mDACGW,IADH,CACQ,UAACT,GAAD;AAAA,iBAASO,SAASG,OAAT,CAAiBV,GAAjB,CAAT;AAAA,SADR,EAEGW,KAFH,CAES,UAACC,GAAD;AAAA,iBAASL,SAASM,KAAT,CAAeD,GAAf,CAAT;AAAA,SAFT;;AAIA,eAAOL,QAAP;AACD,OARD;AASD,KAvBe;AAVN,GAAZ;;AAoCA,SAAOjB,GAAP;AACD,C;;AA9CD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA","file":"read.js","sourcesContent":["import { caller } from 'postmsg-rpc'\r\nimport callbackify from 'callbackify'\r\nimport defer from 'pull-defer'\r\nimport PMS from 'pull-postmsg-stream'\r\nimport toStream from 'pull-stream-to-stream'\r\nimport { post } from 'prepost'\r\nimport { isBufferJson, bufferFromJson } from '../../serialization/buffer'\r\n\r\nexport default function (opts) {\r\n  const api = {\r\n    read: callbackify.variadic(\r\n      post(\r\n        caller('ipfs.files.read', opts),\r\n        bufferFromJson\r\n      )\r\n    ),\r\n    readReadableStream () {\r\n      return toStream.source(api.readPullStream(...arguments))\r\n    },\r\n    readPullStream: (() => {\r\n      const readPullStream = post(\r\n        caller('ipfs.files.readPullStream', opts),\r\n        (res) => PMS.source(res.name, Object.assign({}, opts, {\r\n          post (res) {\r\n            if (isBufferJson(res.data)) {\r\n              res.data = bufferFromJson(res.data)\r\n            }\r\n\r\n            return res\r\n          }\r\n        }))\r\n      )\r\n\r\n      return (...args) => {\r\n        const deferred = defer.source()\r\n\r\n        readPullStream(...args)\r\n          .then((res) => deferred.resolve(res))\r\n          .catch((err) => deferred.abort(err))\r\n\r\n        return deferred\r\n      }\r\n    })()\r\n  }\r\n\r\n  return api\r\n}\r\n"]}