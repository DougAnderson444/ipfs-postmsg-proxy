{"version":3,"sources":["../../src/server/swarm.js"],"names":["getIpfs","opts","peers","pre","swarm","res","map","item","addr","peer","addrs","peerInfoToJson","localAddrs","multiaddrToJson","connect","disconnect"],"mappings":";;;;;;kBAMe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,WAAO,wBAAO,kBAAP,EAA2B,kBAChCD,KAAKE,GAAL,CAAS,aAAT,CADgC,EAEhC,mBACE;AAAA;;AAAA,aAAa,4BAAUC,KAAV,EAAgBF,KAAhB,iCAAb;AAAA,KADF,EAEE,UAACG,GAAD;AAAA,aAASA,IAAIC,GAAJ,CAAQ,UAACC,IAAD,EAAU;AACzBA,aAAKC,IAAL,GAAY,gCAAgBD,KAAKC,IAArB,CAAZ;AACA;AACA,YAAI,sBAAWD,KAAKE,IAAhB,CAAJ,EAA2B;AACzBF,eAAKE,IAAL,GAAY,0BAAeF,KAAKE,IAApB,CAAZ;AACD,SAFD,MAEO,IAAI,oBAASF,KAAKE,IAAd,CAAJ,EAAyB;AAC9BF,eAAKE,IAAL,GAAY,wBAAaF,KAAKE,IAAlB,CAAZ;AACD;AACD,eAAOF,IAAP;AACD,OATQ,CAAT;AAAA,KAFF,CAFgC,CAA3B,EAeJN,IAfI,CADF;AAiBLS,WAAO,wBAAO,kBAAP,EAA2B,kBAChCT,KAAKE,GAAL,CAAS,aAAT,CADgC,EAEhC,mBACE;AAAA,aAAMH,UAAUI,KAAV,CAAgBM,KAAhB,EAAN;AAAA,KADF,EAEE,UAACL,GAAD;AAAA,aAASA,IAAIC,GAAJ,CAAQK,oBAAR,CAAT;AAAA,KAFF,CAFgC,CAA3B,EAMJV,IANI,CAjBF;AAwBLW,gBAAY,wBAAO,uBAAP,EAAgC,kBAC1CX,KAAKE,GAAL,CAAS,kBAAT,CAD0C,EAE1C,mBACE;AAAA,aAAMH,UAAUI,KAAV,CAAgBQ,UAAhB,EAAN;AAAA,KADF,EAEE,UAACP,GAAD;AAAA,aAASA,IAAIC,GAAJ,CAAQO,0BAAR,CAAT;AAAA,KAFF,CAF0C,CAAhC,EAMTZ,IANS,CAxBP;AA+BLa,aAAS,wBAAO,oBAAP,EAA6B,kBACpC,+BAAkB,CAAlB,CADoC,EAEpC,qCAAqB,CAArB,CAFoC,EAGpCb,KAAKE,GAAL,CAAS,eAAT,CAHoC,EAIpC;AAAA;;AAAA,aAAa,6BAAUC,KAAV,EAAgBU,OAAhB,kCAAb;AAAA,KAJoC,CAA7B,EAKNb,IALM,CA/BJ;AAqCLc,gBAAY,wBAAO,uBAAP,EAAgC,kBAC1C,+BAAkB,CAAlB,CAD0C,EAE1C,qCAAqB,CAArB,CAF0C,EAG1Cd,KAAKE,GAAL,CAAS,kBAAT,CAH0C,EAI1C;AAAA;;AAAA,aAAa,6BAAUC,KAAV,EAAgBW,UAAhB,kCAAb;AAAA,KAJ0C,CAAhC,EAKTd,IALS;AArCP,GAAP;AA4CD,C;;AAnDD;;AACA;;AACA;;AACA;;AACA","file":"swarm.js","sourcesContent":["import { expose } from 'postmsg-rpc'\r\nimport { pre, post } from 'prepost'\r\nimport { peerInfoToJson, peerIdToJson, isPeerInfo, isPeerId } from '../serialization/peer'\r\nimport { preMultiaddrFromJson, multiaddrToJson } from '../serialization/multiaddr'\r\nimport { preBufferFromJson } from '../serialization/buffer'\r\n\r\nexport default function (getIpfs, opts) {\r\n  return {\r\n    peers: expose('ipfs.swarm.peers', pre(\r\n      opts.pre('swarm.peers'),\r\n      post(\r\n        (...args) => getIpfs().swarm.peers(...args),\r\n        (res) => res.map((item) => {\r\n          item.addr = multiaddrToJson(item.addr)\r\n          // https://github.com/ipfs/js-ipfs/issues/1248\r\n          if (isPeerInfo(item.peer)) {\r\n            item.peer = peerInfoToJson(item.peer)\r\n          } else if (isPeerId(item.peer)) {\r\n            item.peer = peerIdToJson(item.peer)\r\n          }\r\n          return item\r\n        })\r\n      )\r\n    ), opts),\r\n    addrs: expose('ipfs.swarm.addrs', pre(\r\n      opts.pre('swarm.addrs'),\r\n      post(\r\n        () => getIpfs().swarm.addrs(),\r\n        (res) => res.map(peerInfoToJson)\r\n      )\r\n    ), opts),\r\n    localAddrs: expose('ipfs.swarm.localAddrs', pre(\r\n      opts.pre('swarm.localAddrs'),\r\n      post(\r\n        () => getIpfs().swarm.localAddrs(),\r\n        (res) => res.map(multiaddrToJson)\r\n      )\r\n    ), opts),\r\n    connect: expose('ipfs.swarm.connect', pre(\r\n      preBufferFromJson(0),\r\n      preMultiaddrFromJson(0),\r\n      opts.pre('swarm.connect'),\r\n      (...args) => getIpfs().swarm.connect(...args)\r\n    ), opts),\r\n    disconnect: expose('ipfs.swarm.disconnect', pre(\r\n      preBufferFromJson(0),\r\n      preMultiaddrFromJson(0),\r\n      opts.pre('swarm.disconnect'),\r\n      (...args) => getIpfs().swarm.disconnect(...args)\r\n    ), opts)\r\n  }\r\n}\r\n"]}