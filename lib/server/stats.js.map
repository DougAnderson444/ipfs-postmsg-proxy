{"version":3,"sources":["../../src/server/stats.js"],"names":["getIpfs","opts","bw","pre","stats","totalIn","totalOut","rateIn","rateOut","bwPullStream","res","Promise","resolve","readFnName","PMS","sink","Object","assign","post","data"],"mappings":";;;;;;kBAQe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,QAAI,wBAAO,eAAP,EAAwB,kBAC1BD,KAAKE,GAAL,CAAS,UAAT,CAD0B,EAE1B,mBACE;AAAA;;AAAA,aAAa,4BAAUC,KAAV,EAAgBF,EAAhB,iCAAb;AAAA,KADF,EAEE,UAACE,KAAD,EAAW;AACT,UAAIA,KAAJ,EAAW;AACT,YAAI,gBAAMA,MAAMC,OAAZ,CAAJ,EAA0B;AACxBD,gBAAMC,OAAN,GAAgB,oBAAUD,MAAMC,OAAhB,CAAhB;AACD;;AAED,YAAI,gBAAMD,MAAME,QAAZ,CAAJ,EAA2B;AACzBF,gBAAME,QAAN,GAAiB,oBAAUF,MAAME,QAAhB,CAAjB;AACD;;AAED,YAAI,gBAAMF,MAAMG,MAAZ,CAAJ,EAAyB;AACvBH,gBAAMG,MAAN,GAAe,oBAAUH,MAAMG,MAAhB,CAAf;AACD;;AAED,YAAI,gBAAMH,MAAMI,OAAZ,CAAJ,EAA0B;AACxBJ,gBAAMI,OAAN,GAAgB,oBAAUJ,MAAMI,OAAhB,CAAhB;AACD;AACF;;AAED,aAAOJ,KAAP;AACD,KAtBH,CAF0B,CAAxB,EA0BDH,IA1BC,CADC;AA4BLQ,kBAAc,wBAAO,yBAAP,EAAkC,kBAC9CR,KAAKE,GAAL,CAAS,oBAAT,CAD8C,EAE9C,mBACE;AAAA;;AAAA,aAAa,6BAAUC,KAAV,EAAgBK,YAAhB,kCAAb;AAAA,KADF,EAEE,UAACC,GAAD;AAAA,aAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAChC,YAAMC,aAAa,wBAAnB;;AAEA,kCACEH,GADF,EAEEI,4BAAIC,IAAJ,CAASF,UAAT,EAAqBG,OAAOC,MAAP,CAAc,EAAd,EAAkBhB,IAAlB,EAAwB;AAC3CiB,cAD2C,gBACrCR,GADqC,EAChC;AACT,gBAAMN,QAAQM,IAAIS,IAAlB;;AAEA,gBAAIf,KAAJ,EAAW;AACT,kBAAI,gBAAMA,MAAMC,OAAZ,CAAJ,EAA0B;AACxBD,sBAAMC,OAAN,GAAgB,oBAAUD,MAAMC,OAAhB,CAAhB;AACD;;AAED,kBAAI,gBAAMD,MAAME,QAAZ,CAAJ,EAA2B;AACzBF,sBAAME,QAAN,GAAiB,oBAAUF,MAAME,QAAhB,CAAjB;AACD;;AAED,kBAAI,gBAAMF,MAAMG,MAAZ,CAAJ,EAAyB;AACvBH,sBAAMG,MAAN,GAAe,oBAAUH,MAAMG,MAAhB,CAAf;AACD;;AAED,kBAAI,gBAAMH,MAAMI,OAAZ,CAAJ,EAA0B;AACxBJ,sBAAMI,OAAN,GAAgB,oBAAUJ,MAAMI,OAAhB,CAAhB;AACD;AACF;;AAED,mBAAOE,GAAP;AACD;AAvB0C,SAAxB,CAArB,CAFF;;AA6BAE,gBAAQ,8BAAeC,UAAf,CAAR;AACD,OAjCQ,CAAT;AAAA,KAFF,CAF8C,CAAlC,EAuCXZ,IAvCW;AA5BT,GAAP;AAqED,C;;AA9ED;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA","file":"stats.js","sourcesContent":["import { expose } from 'postmsg-rpc'\r\nimport { pre, post } from 'prepost'\r\nimport shortid from 'shortid'\r\nimport pull from 'pull-stream'\r\nimport PMS from 'pull-postmsg-stream'\r\nimport { isBig, bigToJson } from '../serialization/big'\r\nimport { functionToJson } from '../serialization/function'\r\n\r\nexport default function (getIpfs, opts) {\r\n  return {\r\n    bw: expose('ipfs.stats.bw', pre(\r\n      opts.pre('stats.bw'),\r\n      post(\r\n        (...args) => getIpfs().stats.bw(...args),\r\n        (stats) => {\r\n          if (stats) {\r\n            if (isBig(stats.totalIn)) {\r\n              stats.totalIn = bigToJson(stats.totalIn)\r\n            }\r\n\r\n            if (isBig(stats.totalOut)) {\r\n              stats.totalOut = bigToJson(stats.totalOut)\r\n            }\r\n\r\n            if (isBig(stats.rateIn)) {\r\n              stats.rateIn = bigToJson(stats.rateIn)\r\n            }\r\n\r\n            if (isBig(stats.rateOut)) {\r\n              stats.rateOut = bigToJson(stats.rateOut)\r\n            }\r\n          }\r\n\r\n          return stats\r\n        }\r\n      )\r\n    ), opts),\r\n    bwPullStream: expose('ipfs.stats.bwPullStream', pre(\r\n      opts.pre('stats.bwPullStream'),\r\n      post(\r\n        (...args) => getIpfs().stats.bwPullStream(...args),\r\n        (res) => new Promise((resolve) => {\r\n          const readFnName = shortid()\r\n\r\n          pull(\r\n            res,\r\n            PMS.sink(readFnName, Object.assign({}, opts, {\r\n              post (res) {\r\n                const stats = res.data\r\n\r\n                if (stats) {\r\n                  if (isBig(stats.totalIn)) {\r\n                    stats.totalIn = bigToJson(stats.totalIn)\r\n                  }\r\n\r\n                  if (isBig(stats.totalOut)) {\r\n                    stats.totalOut = bigToJson(stats.totalOut)\r\n                  }\r\n\r\n                  if (isBig(stats.rateIn)) {\r\n                    stats.rateIn = bigToJson(stats.rateIn)\r\n                  }\r\n\r\n                  if (isBig(stats.rateOut)) {\r\n                    stats.rateOut = bigToJson(stats.rateOut)\r\n                  }\r\n                }\r\n\r\n                return res\r\n              }\r\n            }))\r\n          )\r\n\r\n          resolve(functionToJson(readFnName))\r\n        })\r\n      )\r\n    ), opts)\r\n  }\r\n}\r\n"]}