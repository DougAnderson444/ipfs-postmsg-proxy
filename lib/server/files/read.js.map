{"version":3,"sources":["../../../src/server/files/read.js"],"names":["getIpfs","opts","read","pre","files","bufferToJson","readPullStream","res","Promise","resolve","readFnName","PMS","sink","Object","assign","post","data"],"mappings":";;;;;;kBAQe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,UAAM,wBAAO,iBAAP,EAA0B,kBAC9BD,KAAKE,GAAL,CAAS,YAAT,CAD8B,EAE9B,mBACE;AAAA;;AAAA,aAAa,4BAAUC,KAAV,EAAgBF,IAAhB,iCAAb;AAAA,KADF,EAEEG,oBAFF,CAF8B,CAA1B,EAMHJ,IANG,CADD;AAQLK,oBAAgB,wBAAO,2BAAP,EAAoC,kBAClDL,KAAKE,GAAL,CAAS,sBAAT,CADkD,EAElD,mBACE;AAAA;;AAAA,aAAa,6BAAUC,KAAV,EAAgBE,cAAhB,kCAAb;AAAA,KADF,EAEE,UAACC,GAAD;AAAA,aAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAChC,YAAMC,aAAa,wBAAnB;;AAEA,kCACEH,GADF,EAEEI,4BAAIC,IAAJ,CAASF,UAAT,EAAqBG,OAAOC,MAAP,CAAc,EAAd,EAAkBb,IAAlB,EAAwB;AAC3Cc,cAD2C,gBACrCR,GADqC,EAChC;AACT,gBAAI,sBAASA,IAAIS,IAAb,CAAJ,EAAwB;AACtBT,kBAAIS,IAAJ,GAAW,0BAAaT,IAAIS,IAAjB,CAAX;AACD;;AAED,mBAAOT,GAAP;AACD;AAP0C,SAAxB,CAArB,CAFF;;AAaAE,gBAAQ,8BAAeC,UAAf,CAAR;AACD,OAjBQ,CAAT;AAAA,KAFF,CAFkD,CAApC,EAuBbT,IAvBa;AARX,GAAP;AAiCD,C;;AA1CD;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA","file":"read.js","sourcesContent":["import { expose } from 'postmsg-rpc'\r\nimport { pre, post } from 'prepost'\r\nimport shortid from 'shortid'\r\nimport pull from 'pull-stream'\r\nimport PMS from 'pull-postmsg-stream'\r\nimport { isBuffer, bufferToJson } from '../../serialization/buffer'\r\nimport { functionToJson } from '../../serialization/function'\r\n\r\nexport default function (getIpfs, opts) {\r\n  return {\r\n    read: expose('ipfs.files.read', pre(\r\n      opts.pre('files.read'),\r\n      post(\r\n        (...args) => getIpfs().files.read(...args),\r\n        bufferToJson\r\n      )\r\n    ), opts),\r\n    readPullStream: expose('ipfs.files.readPullStream', pre(\r\n      opts.pre('files.readPullStream'),\r\n      post(\r\n        (...args) => getIpfs().files.readPullStream(...args),\r\n        (res) => new Promise((resolve) => {\r\n          const readFnName = shortid()\r\n\r\n          pull(\r\n            res,\r\n            PMS.sink(readFnName, Object.assign({}, opts, {\r\n              post (res) {\r\n                if (isBuffer(res.data)) {\r\n                  res.data = bufferToJson(res.data)\r\n                }\r\n\r\n                return res\r\n              }\r\n            }))\r\n          )\r\n\r\n          resolve(functionToJson(readFnName))\r\n        })\r\n      )\r\n    ), opts)\r\n  }\r\n}\r\n"]}