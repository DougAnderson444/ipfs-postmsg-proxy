{"version":3,"sources":["../../../src/server/files/add.js"],"names":["getIpfs","opts","add","args","fileFromJsonOpts","pms","Array","isArray","map","file","fileFromJson","pre","addPullStream","readFnName","PMS","source","name","pull","obj","files","slice","sink","pullStreamFromJson","content","Object","assign","post","res","data"],"mappings":";;;;;;kBAQe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,SAAK,wBAAO,UAAP,EAAmB,kBACtB,YAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AACX,UAAMC,mBAAmB,EAAEC,KAAKJ,IAAP,EAAzB;;AAEAE,WAAK,CAAL,IAAUG,MAAMC,OAAN,CAAcJ,KAAK,CAAL,CAAd,IACNA,KAAK,CAAL,EAAQK,GAAR,CAAY,UAACC,IAAD;AAAA,eAAUC,aAAaD,IAAb,EAAmBL,gBAAnB,CAAV;AAAA,OAAZ,CADM,GAENM,aAAaP,KAAK,CAAL,CAAb,EAAsBC,gBAAtB,CAFJ;;AAIA,aAAOD,IAAP;AACD,KATqB,EAUtBF,KAAKU,GAAL,CAAS,WAAT,CAVsB,EAWtB;AAAA;;AAAA,aAAa,uBAAUT,GAAV,2BAAb;AAAA,KAXsB,CAAnB,EAYFD,IAZE,CADA;AAcLW,mBAAe,wBAAO,0BAAP,EAAmC,kBAChDX,KAAKU,GAAL,CAAS,qBAAT,CADgD,EAEhD,YAAa;AAAA;;AAAA,yCAATR,IAAS;AAATA,YAAS;AAAA;;AACX,UAAMU,aAAa,wBAAnB;;AAEA,gCACEC,4BAAIC,MAAJ,CAAWZ,KAAK,CAAL,EAAQa,IAAnB,EAAyBf,IAAzB,CADF,EAEEgB,qBAAKT,GAAL,CAAS,UAACU,GAAD;AAAA,eAASR,aAAaQ,GAAb,EAAkB,EAAEb,KAAKJ,IAAP,EAAlB,CAAT;AAAA,OAAT,CAFF,EAGE,4BAAUkB,KAAV,EAAgBP,aAAhB,0CAAiCT,KAAKiB,KAAL,CAAW,CAAX,CAAjC,EAHF,EAIEN,4BAAIO,IAAJ,CAASR,UAAT,EAAqBZ,IAArB,CAJF;;AAOA,aAAO,8BAAeY,UAAf,CAAP;AACD,KAb+C,CAAnC,EAcZZ,IAdY;AAdV,GAAP;AA8BD,C;;AAvCD;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAmCA,SAASS,YAAT,CAAuBQ,GAAvB,EAA4BjB,IAA5B,EAAkC;AAChCA,SAAOA,QAAQ,EAAf;;AAEA,MAAI,0BAAaiB,GAAb,CAAJ,EAAuB;AAAE;AACvB,WAAO,4BAAeA,GAAf,CAAP;AACD,GAFD,MAEO,IAAI,8BAAeA,GAAf,CAAJ,EAAyB;AAAE;AAChC,WAAOI,mBAAmBJ,GAAnB,EAAwBjB,IAAxB,CAAP;AACD,GAFM,MAEA,IAAIiB,OAAOA,IAAIK,OAAf,EAAwB;AAAE;AAC/B,WAAOC,OAAOC,MAAP,CAAc,EAAd,EAAkBP,GAAlB,EAAuB,EAAEK,SAASb,aAAaQ,IAAIK,OAAjB,EAA0BtB,IAA1B,CAAX,EAAvB,CAAP;AACD;;AAED,SAAOiB,GAAP,CAXgC,CAWrB;AACZ;;AAED,SAASI,kBAAT,CAA6BJ,GAA7B,EAAkCjB,IAAlC,EAAwC;AACtCA,SAAOA,QAAQ,EAAf;;AAEA,SAAOa,4BAAIC,MAAJ,CAAWG,IAAIF,IAAf,EAAqBQ,OAAOC,MAAP,CAAc,EAAd,EAAkBxB,KAAKI,GAAvB,EAA4B;AACtDqB,QADsD,gBAChDC,GADgD,EAC3C;AACT,UAAI,0BAAaA,IAAIC,IAAjB,CAAJ,EAA4B;AAC1BD,YAAIC,IAAJ,GAAW,4BAAeD,IAAIC,IAAnB,CAAX;AACD;;AAED,aAAOD,GAAP;AACD;AAPqD,GAA5B,CAArB,CAAP;AASD","file":"add.js","sourcesContent":["import { expose } from 'postmsg-rpc'\r\nimport { pre } from 'prepost'\r\nimport pull from 'pull-stream'\r\nimport PMS from 'pull-postmsg-stream'\r\nimport shortid from 'shortid'\r\nimport { isBufferJson, bufferFromJson } from '../../serialization/buffer'\r\nimport { isFunctionJson, functionToJson } from '../../serialization/function'\r\n\r\nexport default function (getIpfs, opts) {\r\n  return {\r\n    add: expose('ipfs.add', pre(\r\n      (...args) => {\r\n        const fileFromJsonOpts = { pms: opts }\r\n\r\n        args[0] = Array.isArray(args[0])\r\n          ? args[0].map((file) => fileFromJson(file, fileFromJsonOpts))\r\n          : fileFromJson(args[0], fileFromJsonOpts)\r\n\r\n        return args\r\n      },\r\n      opts.pre('files.add'),\r\n      (...args) => getIpfs().add(...args)\r\n    ), opts),\r\n    addPullStream: expose('ipfs.files.addPullStream', pre(\r\n      opts.pre('files.addPullStream'),\r\n      (...args) => {\r\n        const readFnName = shortid()\r\n\r\n        pull(\r\n          PMS.source(args[0].name, opts),\r\n          pull.map((obj) => fileFromJson(obj, { pms: opts })),\r\n          getIpfs().files.addPullStream(...args.slice(1)),\r\n          PMS.sink(readFnName, opts)\r\n        )\r\n\r\n        return functionToJson(readFnName)\r\n      }\r\n    ), opts)\r\n  }\r\n}\r\n\r\nfunction fileFromJson (obj, opts) {\r\n  opts = opts || {}\r\n\r\n  if (isBufferJson(obj)) { // Buffer\r\n    return bufferFromJson(obj)\r\n  } else if (isFunctionJson(obj)) { // Pull stream\r\n    return pullStreamFromJson(obj, opts)\r\n  } else if (obj && obj.content) { // Object { path?, content }\r\n    return Object.assign({}, obj, { content: fileFromJson(obj.content, opts) })\r\n  }\r\n\r\n  return obj // Object { path } maybe, but could be anything\r\n}\r\n\r\nfunction pullStreamFromJson (obj, opts) {\r\n  opts = opts || {}\r\n\r\n  return PMS.source(obj.name, Object.assign({}, opts.pms, {\r\n    post (res) {\r\n      if (isBufferJson(res.data)) {\r\n        res.data = bufferFromJson(res.data)\r\n      }\r\n\r\n      return res\r\n    }\r\n  }))\r\n}\r\n"]}