{"version":3,"sources":["../../../src/server/files/get.js"],"names":["getIpfs","opts","get","pre","files","map","file","content","getPullStream","res","Promise","resolve","readFnName","pull","PMS","sink","Object","assign","post","data"],"mappings":";;;;;;kBASe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,SAAK,wBAAO,gBAAP,EAAyB,kBAC5B,+BAAkB,CAAlB,CAD4B,EAE5B,yBAAe,CAAf,CAF4B,EAG5BD,KAAKE,GAAL,CAAS,WAAT,CAH4B,EAI5B,mBACE;AAAA;;AAAA,aAAa,uBAAUD,GAAV,2BAAb;AAAA,KADF,EAEE,UAACE,KAAD;AAAA,aAAWA,MAAMC,GAAN,CAAU,UAACC,IAAD,EAAU;AAC7B,YAAIA,KAAKC,OAAT,EAAkB;AAChBD,eAAKC,OAAL,GAAe,0BAAaD,KAAKC,OAAlB,CAAf;AACD;;AAED,eAAOD,IAAP;AACD,OANU,CAAX;AAAA,KAFF,CAJ4B,CAAzB,EAcFL,IAdE,CADA;AAgBLO,mBAAe,wBAAO,0BAAP,EAAmC,kBAChD,+BAAkB,CAAlB,CADgD,EAEhD,yBAAe,CAAf,CAFgD,EAGhDP,KAAKE,GAAL,CAAS,qBAAT,CAHgD,EAIhD,mBACE;AAAA;;AAAA,aAAa,4BAAUC,KAAV,EAAgBI,aAAhB,iCAAb;AAAA,KADF,EAEE,UAACC,GAAD;AAAA,aAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAChC,YAAMC,aAAa,wBAAnB;;AAEA,kCACEH,GADF,EAEEI,qBAAKR,GAAL,CAAS,UAACC,IAAD,EAAU;AACjB,cAAIA,KAAKC,OAAT,EAAkB;AAChB,gBAAMK,cAAa,wBAAnB;;AAEA,sCACEN,KAAKC,OADP,EAEEO,4BAAIC,IAAJ,CAASH,WAAT,EAAqBI,OAAOC,MAAP,CAAc,EAAd,EAAkBhB,IAAlB,EAAwB;AAC3CiB,kBAD2C,gBACrCT,GADqC,EAChC;AACT,oBAAI,sBAASA,IAAIU,IAAb,CAAJ,EAAwB;AACtBV,sBAAIU,IAAJ,GAAW,0BAAaV,IAAIU,IAAjB,CAAX;AACD;;AAED,uBAAOV,GAAP;AACD;AAP0C,aAAxB,CAArB,CAFF;;AAaAH,iBAAKC,OAAL,GAAe,8BAAeK,WAAf,CAAf;AACD;;AAED,iBAAON,IAAP;AACD,SArBD,CAFF,EAwBEQ,4BAAIC,IAAJ,CAASH,UAAT,EAAqBX,IAArB,CAxBF;;AA2BAU,gBAAQ,8BAAeC,UAAf,CAAR;AACD,OA/BQ,CAAT;AAAA,KAFF,CAJgD,CAAnC,EAuCZX,IAvCY;AAhBV,GAAP;AAyDD,C;;AAnED;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA","file":"get.js","sourcesContent":["import { expose } from 'postmsg-rpc'\r\nimport { pre, post } from 'prepost'\r\nimport pull from 'pull-stream'\r\nimport PMS from 'pull-postmsg-stream'\r\nimport shortid from 'shortid'\r\nimport { preCidFromJson } from '../../serialization/cid'\r\nimport { isBuffer, preBufferFromJson, bufferToJson } from '../../serialization/buffer'\r\nimport { functionToJson } from '../../serialization/function'\r\n\r\nexport default function (getIpfs, opts) {\r\n  return {\r\n    get: expose('ipfs.files.get', pre(\r\n      preBufferFromJson(0),\r\n      preCidFromJson(0),\r\n      opts.pre('files.get'),\r\n      post(\r\n        (...args) => getIpfs().get(...args),\r\n        (files) => files.map((file) => {\r\n          if (file.content) {\r\n            file.content = bufferToJson(file.content)\r\n          }\r\n\r\n          return file\r\n        })\r\n      )\r\n    ), opts),\r\n    getPullStream: expose('ipfs.files.getPullStream', pre(\r\n      preBufferFromJson(0),\r\n      preCidFromJson(0),\r\n      opts.pre('files.getPullStream'),\r\n      post(\r\n        (...args) => getIpfs().files.getPullStream(...args),\r\n        (res) => new Promise((resolve) => {\r\n          const readFnName = shortid()\r\n\r\n          pull(\r\n            res,\r\n            pull.map((file) => {\r\n              if (file.content) {\r\n                const readFnName = shortid()\r\n\r\n                pull(\r\n                  file.content,\r\n                  PMS.sink(readFnName, Object.assign({}, opts, {\r\n                    post (res) {\r\n                      if (isBuffer(res.data)) {\r\n                        res.data = bufferToJson(res.data)\r\n                      }\r\n\r\n                      return res\r\n                    }\r\n                  }))\r\n                )\r\n\r\n                file.content = functionToJson(readFnName)\r\n              }\r\n\r\n              return file\r\n            }),\r\n            PMS.sink(readFnName, opts)\r\n          )\r\n\r\n          resolve(functionToJson(readFnName))\r\n        })\r\n      )\r\n    ), opts)\r\n  }\r\n}\r\n"]}